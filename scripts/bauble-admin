#!/usr/bin/env python
#
#  Copyright (c) 2005,2006,2007,2008  Brett Adams <brett@belizebotanic.org>
#  This is free software, see GNU General Public License v2 for details.
"""
The bauble-admin script makes it easier to create and database and change
some of its properties
"""

import sys
import os
from optparse import OptionParser
from getpass import getpass
import logging
from logging import info, warn, error

usage = 'usage: %prog [command] [options] dbname'
parser = OptionParser(usage)
parser.add_option('-H', '--host', dest='hostname', metavar='HOST',
		  help='the host to connect to')
parser.add_option('-u', '--user', dest='user', metavar='USER',
		  help='the user name to use when connecting to the server')
parser.add_option('-P', '--port', dest='port', metavar='PORT',
		  help='the port on the server to connect to')
parser.add_option('-o', '--owner', dest='owner', metavar='OWNER',
		  help='the owner of the newly created database, if not ' \
                       'set  then use the user name')
parser.add_option('-p', action='store_true', default=False, dest='password',
		  help='ask for a password')
parser.add_option('-d', '--dbtype', dest='dbtype', metavar='TYPE',
		  help='the database type')
parser.add_option('-v', '--verbose', dest='verbose', action='store_true',
		  default=False, help='verbose output')

options, args = parser.parse_args()
commands = {}

logging.basicConfig(format='%(levelname)s: %(message)s')
if options.verbose:
    logging.getLogger().setLevel(logging.INFO)


def error_and_exit(msg, retval=1):
    error(msg)
    sys.exit(retval)


class Command(object):
    """
    New commands should subclass the Command class.
    """
    def __init__(self):
        if self.__doc__ == Command.__doc__:
            warn('No help set for %s' % self)

    @classmethod
    def run(self):
        raise NotImplementedError


class CreateCommand(Command):
    """
    The create command creates a database.
    """
    name = 'create'

    @classmethod
    def run(cls):
        if options.dbtype != 'postgres':
            error_and_exit('Creating database is only support on postgres '
                           'database')
        cls._run_postgres()


    @classmethod
    def _run_mysql(cls):
        raise NotImplementedError


    @classmethod
    def _run_postgres(cls):
        # ISOLATION_LEVEL_AUTOCOMMIT needed from create database
        from psycopg2.extensions import ISOLATION_LEVEL_AUTOCOMMIT
        conn.set_isolation_level(ISOLATION_LEVEL_AUTOCOMMIT)
        cursor = conn.cursor()

        # check if the database already exists
        sql = "SELECT datname FROM pg_database WHERE datname='%s';" % dbname
        logging.info(sql)
        cursor.execute(sql)
        rows = cursor.fetchall()
        if (dbname,) in rows:
            print 'database %s already exists' % dbname
            sys.exit(1)

        # create the owner if the owner doesn't already exist
        sql = "SELECT rolname FROM pg_roles WHERE rolname='%s';" % \
            options.owner
        logging.info(sql)
        cursor.execute(sql)
        rows = cursor.fetchall()
        if (options.owner,) in rows:
            print 'user %s already exist' % options.owner
        else:
            password = getpass('Password for new database owner %s: ' % \
                                   options.owner)
            sql = "CREATE ROLE %s LOGIN PASSWORD '%s';" % \
                (options.owner, password)
            logging.info(sql)
            cursor.execute(sql)
            conn.commit()

        # create the database and give owner permissions to alter it
        options_dict = dict(dbname=dbname, owner=options.owner)
        sql = 'CREATE DATABASE %(dbname)s OWNER %(owner)s' % options_dict
        logging.info(sql)
        cursor.execute(sql)
        conn.close()



class UserCommand(Command):
    """
    The user command allows you to add, remove and change the
    permissions of a user on a database.
    """
    name = 'user'

    @classmethod
    def run(cls):
        if options.dbtype != 'postgres':
            error_and_exit('User properties can only be changed on a '
                           'postgres database.')
        cls._run_postgres()


    @classmethod
    def _run_postgres(cls):
        # TODO: get subcommands
        pass




class RemoveCommand(Command):
    """
    Remove a database from a server.  BE CAREFUL.
    """
    name = 'remove'
    def _run_postgres():
        pass

    def run():

        pass



def register_command(command):
    """
    Register a new command.
    """
    commands[command.name] = command

register_command(CreateCommand)
register_command(UserCommand)
register_command(RemoveCommand)


if len(args) < 1:
    parser.error('You must supply a command')

cmd = args[0]
if cmd not in commands:
    parser.error('%s is an invalid command' % cmd)

try:
    dbname =  args[-1]
except:
    parser.error('You must specify a database name')


def build_postgres_command():
    pass

def build_mysql_command():
    pass

dbapi = None
if options.dbtype == 'sqlite':
    parser.error('It it not necessary to use this script on an SQLite '
                 'database')
elif options.dbtype == 'postgres':
    dbapi = __import__('psycopg2')
elif options.dbtype == 'mysql':
    dbapi = __import__('MySQLdb')
else:
    parser.error('You must specify the database type with -d')

if not options.owner:
    options.owner = os.environ['USER']
    print 'Setting owner as %s' % options.owner

# build connect() args and connect to the server
connect_args = ['dbname=postgres']
if options.hostname is not None:
    connect_args.append('host=%s' % options.hostname)
if options.password:
    password = getpass('Password for %s: ' % options.user)
    connect_args.append('password=%s' % password)
if options.user:
    connect_args.append('user=%s' % options.user)
if options.port:
    connect_args.append('port=%s' % options.port)

conn = dbapi.connect(' '.join(connect_args))

commands[cmd].run()

